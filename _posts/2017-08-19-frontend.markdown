---
layout:     post
title:      "每天一个前端知识（86）: 接收关键字参数的选项对象"
subtitle:   "frontend"
date:       2017-08-19 00:00:00
author:     "Tiny"
header-img: "img/post-bg-frontend.jpg"
header-mask: 0.3
catalog:    true
tags:
    - 前端开发
    - 开发规范
    - 前端教程
---

    // 定义一个接受参数的选项对象的函数
    function Alert(obj) {
        this.level = obj.level;
        this.msg = obj.msg;
    }
    var ale = new Alert({
        level: 0,
        msg: 'hello'
    });
    console.log(ale); // Alert { level: 0, msg: 'hello' }
    // 当然如果一些参数是必选的话,我们把他们单独拿出来,而且参数的选项对象上的属性不是必选的
    function Alert1(level, msg, options) {
        this.level = level;
        this.msg = msg;
        for(var p in options) {
            this[p] = options[p]
        }
    }
    var ale1 = new Alert1(1, 'find error', {
        count: 8,
        theme: 'default'
    });
    console.log(ale1); // Alert1 { level: 1, msg: 'find error', count: 8, theme: 'default' }
    // 使用extend函数扩展我们的参数对象
    function extend(target, source) {
        if(source) {
            for(var p in source) {
                var val = source[p];
                if('undefined' !== typeof val) {
                    target[p] = val;
                }
            }
        }
        return target;
    }
    // 升级原来的构造函数
    function Alert2(level, msg, options) {
        var opt = extend({
            level: level,
            msg: msg
        });
        opt = extend(opt, options);
        extend(this, opt);
    }
    var ale2 = new Alert2(2, 'bug', {
        count: 1,
        theme: 'highlight'
    });
    console.log(ale2); // Alert2 { level: 2, msg: 'bug', count: 1, theme: 'highlight' }

### 谨记

使用选项对象使得API更具可读性,更容易记忆。

所有通过选项对象提供的参数应当被视为可选的。

使用extend函数抽象出从选项对象中提取值的逻辑。

参考资料：https://lee134134134.github.io/page/3/


