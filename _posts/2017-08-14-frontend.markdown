---
layout:     post
title:      "每天一个前端知识（81）:迭代方法优于循环"
subtitle:   "frontend"
date:       2017-08-14 00:00:00
author:     "Tiny"
header-img: "img/post-bg-frontend.jpg"
header-mask: 0.3
catalog:    true
tags:
    - 前端开发
    - 开发规范
    - 前端教程
---

    // 传统的循环需要我们手动控制循环的条件,易出错
    var arr = [1, 2, 3, 5];
    for(var i = 0, n = arr.length; i < n; i++) {
        console.log(arr[i]);
    }
    // 我们可以使用数组的forEach替代,更方便一些
    arr.forEach(function(val, index) {
        console.log(val, index);
    });
    // 我们可以产生一个新的数组
    var arr1 = arr.map(function(val, index) {
        return ++val;
    });
    console.log(arr1); // [ 2, 3, 4, 6 ]
    // 我们可以过滤数组中的一些值
    var arr2 = arr.filter(function(val) {
        return val > 2;
    });
    console.log(arr2); // [ 3, 5 ]
    // 使用some every方法提前终止循环
    console.log(arr.some(function(val, index) {
        console.log(index);
        return val > 2;
    }));
    console.log(arr.every(function(val, index) {
        console.log(index);
        return val > 2;
    }));
    // 当然我们可以自己添加自己的方法,比如一个简单的类似map的方法
    Array.prototype.likeMap = function(fn) {
        var result = [];
        for(var i = 0, n = this.length; i < n; i++) {
            result[i] = fn(this[i], i);
        }
        return result;
    };
    var arr3 = arr.likeMap(function(val) {
        return val + 10;
    });
    console.log(arr3); // [ 11, 12, 13, 15 ]

### 谨记

使用迭代的方法(如Array.prototype.forEach和Array.prototype.map)替换for循环使得代码更可读,并且避免了重复循环控制逻辑。

使用自定义的迭代函数来抽象未被标准库支持的常见循环模式。

在需要提前终止循环的情况下,仍然推荐使用传统的循环。另外,some和very方法也可用于提前退出。

参考资料：https://lee134134134.github.io/page/4/



