---
layout:     post
title:      "每天一个前端知识（55）:永远不要修改arguments对象"
subtitle:   "frontend"
date:       2017-07-19 00:00:00
author:     "Tiny"
header-img: "img/post-bg-frontend.jpg"
header-mask: 0.3
catalog:    true
tags:
    - 前端开发
    - 开发规范
    - 前端教程
---

    // 尝试修改arguments对象
    function callMethod(obj, method) {
        var shift = [].shift;
        shift.call(arguments);
        shift.call(arguments);
        console.log(arguments); // { '0': 1, '1': 2 }
        console.log(arguments[0] === obj, arguments[0] === 1); // true true(当我们的第三个参数是数字1)
        console.log(arguments[1] === method, arguments[1] === 2); // true true(当我们的第四个参数是数字2)
        // 因为obj === arguments[0]
        // 因为method === arguments[1]
        return obj[method].apply(obj, arguments); // 相当于[]
    }
    var obj = {
        add: function(x, y) {
            return x + y;
        }
    };
    //callMethod(obj, 'add', 1, 2); // Cannot read property 'apply' of undefined
    // 严格模式下
    function strictMode(x) {
        'use strict';
        arguments[0] = 'something';
        console.log(x, arguments[0]); // hello something
        return x === arguments[0];
    }
    // 非严格模式下
    function notStrictMode(x) {
        arguments[0] = 'something';
        console.log(x, arguments[0]); // something something
        return x === arguments[0];
    }
    console.log(strictMode('hello')); // false
    console.log(notStrictMode('hello')); // true
    // 修复刚开始的方法
    function fixCallMethod(obj, method) {
        var args = [].slice.call(arguments, 2);
        return obj[method].apply(obj, args);
    }
    console.log(fixCallMethod(obj, 'add', 1, 2)); // 3

### 谨记

永远不要修改arguments对象。

使用[].slice.call(arguments)将arguments对象复制到一个真正的数组中再进行修改。

参考资料：https://lee134134134.github.io/page/6/



